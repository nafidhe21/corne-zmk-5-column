/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    tapping-term-ms = <400>;
    quick-tap-ms = <175>;
    require-prior-idle-ms = <150>;
    flavor = "balanced";
};

&lt { tapping-term-ms = <400>; };

/ {
    combos {
        compatible = "zmk,combos";

        to_symbol {
            bindings = <&to 2>;
            key-positions = <36 41>;
        };

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <1 2>;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };

    keymap {
        compatible = "zmk,keymap";

        qwerty_layer {
            bindings = <
&trans  &kp Q           &kp W           &kp E        &kp R                        &kp T                 &kp Y        &kp U                 &kp I                    &kp O                 &kp P               &trans
&trans  &kp A           &kp S           &kp D        &kp F                        &kp G                 &kp H        &kp J                 &kp K                    &kp L                 &kp SEMICOLON       &trans
&trans  &mt LEFT_WIN Z  &mt LEFT_ALT X  &mt LCTRL C  &mt LEFT_SHIFT V             &kp B                 &kp N        &mt RIGHT_SHIFT M     &mt RIGHT_CONTROL COMMA  &mt RIGHT_ALT PERIOD  &mt LEFT_WIN SLASH  &trans
                                        &kp DEL      &mt LC(BACKSPACE) BACKSPACE  &mt LEFT_SHIFT TAB    &mt H ENTER  &mt LEFT_SHIFT SPACE  &to 1
            >;
        };

        numsym_layer {
            bindings = <
&trans  &kp LEFT_BRACKET  &kp N7        &kp N8        &kp N9        &kp RIGHT_BRACKET    &kp LC(Y)  &kp LC(V)        &kp LC(C)      &kp LC(X)      &kp LC(Z)  &trans
&trans  &kp SEMICOLON     &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp EQUAL            &kp LEFT   &kp DOWN         &kp UP         &kp RIGHT      &to 3      &trans
&trans  &kp DOT           &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_0         &kp CAPS   &kp RIGHT_SHIFT  &kp RIGHT_WIN  &kp RIGHT_ALT  &kp RCTRL  &trans
                                        &to 0         &trans        &trans               &trans     &trans           &to 2
            >;
        };

        symbol {
            bindings = <
&trans  &kp EXCLAMATION    &kp AT_SIGN       &kp HASH       &kp DOLLAR  &kp PERCENT    &kp CARET       &kp AMPERSAND  &kp ASTERISK     &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans
&trans  &kp LEFT_BRACE     &kp LEFT_BRACKET  &kp BACKSLASH  &kp PIPE    &kp SLASH      &kp MINUS       &kp EQUAL      &kp TILDE        &kp RIGHT_BRACKET     &kp RIGHT_BRACE        &trans
&trans  &kp DOUBLE_QUOTES  &kp SINGLE_QUOTE  &kp GRAVE      &kp COMMA   &kp PERIOD     &kp UNDERSCORE  &kp PLUS       &kp RIGHT_SHIFT  &kp RIGHT_ALT         &kp RCTRL              &trans
                                             &to 0          &trans      &trans         &trans          &trans         &to 4
            >;
        };

        fun_layer {
            bindings = <
&trans  &kp C_VOLUME_UP  &kp F7  &kp F8  &kp F9  &kp F12     &kp C_BRIGHTNESS_INC  &kp K_PASTE     &mmv MOVE_UP    &kp K_COPY       &kp ESC        &trans
&trans  &kp K_MUTE       &kp F4  &kp F5  &kp F6  &kp F11     &kp C_PLAY_PAUSE      &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &kp PG_UP      &trans
&trans  &kp C_VOL_DN     &kp F1  &kp F2  &kp F3  &kp F10     &kp C_BRIGHTNESS_DEC  &kp K_UNDO      &kp K_REDO      &kp K_CUT        &kp PAGE_DOWN  &trans
                                 &to 0   &trans  &mkp MB2    &mkp MB1              &trans          &to 4
            >;
        };

        sys_layer {
            bindings = <
&trans  &trans        &trans        &bt BT_PRV    &bt BT_NXT    &trans            &none   &trans  &trans  &trans  &trans  &trans
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4      &trans  &none   &none   &none   &none   &trans
&trans  &bootloader   &sys_reset    &none         &bt BT_CLR    &bt BT_CLR_ALL    &none   &trans  &trans  &trans  &trans  &trans
                                    &to 0         &trans        &trans            &trans  &trans  &trans
            >;
        };
    };
};
